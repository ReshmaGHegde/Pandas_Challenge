
Heroes Of Pymoli (Data Analysis)
Of the 1163 active players, the vast majority are male (84%). There also exists, a smaller, but notable proportion of female players (14%).

Our peak age demographic falls between 20-24 (44.8%) with secondary groups falling between 15-19 (18.60%) and 25-29 (13.4%).
--------------------------------------------------------------
import pandas as pd
import numpy as np
?
# File to Load (Remember to Change These)
file_to_load = "Resources/purchase_data.csv"
?
# Read Purchasing File and store into Pandas Dataframe
purchase_data = pd.read_csv(file_to_load)
#Listing the columns
purchase_data.columns
Index(['Purchase ID', 'SN', 'Age', 'Gender', 'Item ID', 'Item Name', 'Price'], dtype='object')
#Viewing the purchase_data Dataframe
purchase_data.head()
Purchase ID	SN	Age	Gender	Item ID	Item Name	Price
0	0	Lisim78	20	Male	108	Extraction, Quickblade Of Trembling Hands	3.53
1	1	Lisovynya38	40	Male	143	Frenzied Scimitar	1.56
2	2	Ithergue48	24	Male	92	Final Critic	4.88
3	3	Chamassasya86	24	Male	100	Blindscythe	3.27
4	4	Iskosia90	23	Male	131	Fury	1.44
Player Count
Display the total number of players
purchase_data_unique = len(purchase_data["SN"].value_counts())
Total_players = {"Total Player": [purchase_data_unique]}
?
#pd.DataFrame([purchase_data_unique], columns = ["Total Players"])
Total_players_df = pd.DataFrame(Total_players)
Total_players_df
Total Player
0	576
Purchasing Analysis (Total)
Run basic calculations to obtain number of unique items, average price, etc.
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame
purchase_unique_item = len(purchase_data["Item ID"].value_counts())
average_purchase_price = purchase_data["Price"].mean()
total_purchases = purchase_data["SN"].count()
total_revenue = purchase_data["Price"].sum()
pd.DataFrame({"Unique Items":[purchase_unique_item],"Average Price":["${:,.2f}".format(average_purchase_price)],\
              "Total Purchases":[total_purchases],"Total Revenue":["${:,.2f}".format(total_revenue)]})
?
Unique Items	Average Price	Total Purchases	Total Revenue
0	183	$3.05	780	$2,379.77
Gender Demographics
Percentage and Count of Male Players
Percentage and Count of Female Players
Percentage and Count of Other / Non-Disclosed
purchase_data_gender_uni = purchase_data.groupby('Gender').SN.nunique()
purch_data_gen_uni_perc = (purchase_data.groupby('Gender').SN.nunique()*100)/purchase_data_unique
?
#-----------------------------
gender_dict = {"Total Count": purchase_data_gender_uni, "Percentage of Players": purch_data_gen_uni_perc}
gender_dict
?
#----------------------------
gender_detail_df = pd.DataFrame(gender_dict)
gender_detail_df
gender_detail_df.round(2)
Total Count	Percentage of Players
Gender		
Female	81	14.06
Male	484	84.03
Other / Non-Disclosed	11	1.91
Purchasing Analysis (Gender)
Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame
purchase_data_gender = purchase_data["Gender"].value_counts()
purch_sum_by_gender = purchase_data.groupby(['Gender']).sum()["Price"]
purch_avr_by_gender = purchase_data.groupby(['Gender']).mean()["Price"]
purch_gender_avr_perperson = purch_sum_by_gender / purchase_data_gender_uni
?
#---------------------------------------
age_demo = {"Total Count": purchase_data_gender,"Average Purchase Price": purch_avr_by_gender,"Total Purchase Value":purch_sum_by_gender,"Avg Total Purchase per Person":purch_gender_avr_perperson}
age_demo_df = pd.DataFrame(age_demo)
?
#-----------------------------------
age_demo_df["Average Purchase Price"] = age_demo_df["Average Purchase Price"].map("${:,.2f}".format)
age_demo_df["Total Purchase Value"] = age_demo_df["Total Purchase Value"].map("${:,.2f}".format)
age_demo_df["Avg Total Purchase per Person"] = age_demo_df["Avg Total Purchase per Person"].map("${:,.2f}".format)
age_demo_df.round(2)
?
Total Count	Average Purchase Price	Total Purchase Value	Avg Total Purchase per Person
Female	113	$3.20	$361.94	$4.47
Male	652	$3.02	$1,967.64	$4.07
Other / Non-Disclosed	15	$3.35	$50.19	$4.56
Age Demographics
Establish bins for ages
Categorize the existing players using the age bins. Hint: use pd.cut()
Calculate the numbers and percentages by age group
Create a summary data frame to hold the results
Optional: round the percentage column to two decimal points
Display Age Demographics Table
purchase_subsets = purchase_data.loc[:, ["Gender", "SN", "Age"]]
purchase_subsets = purchase_subsets.drop_duplicates(["SN"])
?
#------------------------
bins = [0, 9.90, 14.90, 19.90, 24.90, 29.90, 34.90, 39.90, 9999]
group_names = ["< 10", "10-14", "15-19", "20-24", "25-29", "30-34","35-39", "40+"]
purchase_subsets["Age Range"] = pd.cut(purchase_subsets["Age"], bins, labels=group_names)
?
#--------------------
players_count = len(purchase_subsets["SN"].value_counts())
purchase_subsets_totals = purchase_subsets["Age Range"].value_counts()
age_percents = purchase_subsets_totals * 100 / players_count
?
#------------------
age_binned_df = pd.DataFrame({"Total Count":purchase_subsets_totals,"Percentage of Players":age_percents})
age_binned_df = age_binned_df.round(2)
age_binned_df.sort_index()
Total Count	Percentage of Players
< 10	17	2.95
10-14	22	3.82
15-19	107	18.58
20-24	258	44.79
25-29	77	13.37
30-34	52	9.03
35-39	31	5.38
40+	12	2.08
Purchasing Analysis (Age)
Bin the purchase_data data frame by age
Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame
#age_max = purchase_subsets["Age"].max()
#age_min = purchase_subsets["Age"].min()
# Bin the Purchasing Data
purchasedata_bin = purchase_data.loc[:, ["SN", "Age","Price"]]
agebins = [0, 9.90, 14.90, 19.90, 24.90, 29.90, 34.90, 39.90, 9999]
group_names1 = ["< 10", "10-14", "15-19", "20-24", "25-29", "30-34","35-39", "40+"]
purchasedata_bin["Age Range"] = pd.cut(purchasedata_bin["Age"], agebins, labels=group_names1)
?
# ------------------------------------------
age_purchase_total = purchasedata_bin.groupby(["Age Range"]).sum()["Price"].rename("Total Purchase Value")
age_average = purchasedata_bin.groupby(["Age Range"]).mean()["Price"].rename("Average Purchase Price")
age_counts = purchasedata_bin.groupby(["Age Range"]).count()["Price"].rename("Purchase Count")
a = purchasedata_bin.groupby("Age Range").sum()["Price"]
b = purchasedata_bin.groupby("Age Range").SN.nunique()
?
?
#-----------------------------------------
purchase_subsets2_totals = purchasedata_bin["Age Range"].value_counts()
purchase_subsets2_total = a/b
?
# Convert to DataFrame
age_data1 = pd.DataFrame({"Purchase Count": age_counts, "Average Purchase Price": age_average,\
                         "Total Purchase Value": age_purchase_total, "Normalized Totals": purchase_subsets2_total})
?
#------------------------------
age_data1["Average Purchase Price"] = age_data1["Average Purchase Price"].map("${:,.2f}".format)
age_data1["Total Purchase Value"] = age_data1["Total Purchase Value"].map("${:,.2f}".format)
age_data1["Purchase Count"] = age_data1["Purchase Count"].map("{:,}".format)
age_data1["Avg Total Purchase per Person"] = age_data1["Normalized Totals"].map("${:,.2f}".format)
age_data1 = age_data1.loc[:, ["Purchase Count", "Average Purchase Price", "Total Purchase Value", "Avg Total Purchase per Person"]]
?
#------------------------------------
age_data1
Purchase Count	Average Purchase Price	Total Purchase Value	Avg Total Purchase per Person
Age Range				
< 10	23	$3.35	$77.13	$4.54
10-14	28	$2.96	$82.78	$3.76
15-19	136	$3.04	$412.89	$3.86
20-24	365	$3.05	$1,114.06	$4.32
25-29	101	$2.90	$293.00	$3.81
30-34	73	$2.93	$214.00	$4.12
35-39	41	$3.60	$147.67	$4.76
40+	13	$2.94	$38.24	$3.19
Top Spenders
Run basic calculations to obtain the results in the table below
Create a summary data frame to hold the results
Sort the total purchase value column in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the summary data frame
# Basic Calculations
user_total = purchasedata_bin.groupby(["SN"]).sum()["Price"].rename("Total Purchase Value")
user_average = purchasedata_bin.groupby(["SN"]).mean()["Price"].rename("Average Purchase Price")
user_count = purchasedata_bin.groupby(["SN"]).count()["Price"].rename("Purchase Count")
?
# ------------------------------
user_data = pd.DataFrame({"Total Purchase Value": user_total, "Average Purchase Price": user_average, "Purchase Count": user_count})
?
# --------------------------------------
user_data_sorted = user_data.sort_values("Total Purchase Value", ascending=False)
?
# -----------------------------------
user_data_sorted["Average Purchase Price"] = user_data_sorted["Average Purchase Price"].map("${:,.2f}".format)
user_data_sorted["Total Purchase Value"] = user_data_sorted["Total Purchase Value"].map("${:,.2f}".format)
user_data_sorted = user_data_sorted.loc[:,["Purchase Count", "Average Purchase Price", "Total Purchase Value"]]
?
# -----------------------------------
user_data_sorted.head(5)
Purchase Count	Average Purchase Price	Total Purchase Value
SN			
Lisosia93	5	$3.79	$18.96
Idastidru52	4	$3.86	$15.45
Chamjask73	3	$4.61	$13.83
Iral74	4	$3.40	$13.62
Iskadarya95	3	$4.37	$13.10
Most Popular Items
Retrieve the Item ID, Item Name, and Item Price columns
Group by Item ID and Item Name. Perform calculations to obtain purchase count, item price, and total purchase value
Create a summary data frame to hold the results
Sort the purchase count column in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the summary data frame
# Extract item Data
item_data = purchase_data.loc[:,["Item ID", "Item Name", "Price"]]
?
# ------------------------------------
total_item_purchase = item_data.groupby(["Item ID", "Item Name"]).sum()["Price"].rename("Total Purchase Value")
average_item_purchase = item_data.groupby(["Item ID", "Item Name"]).mean()["Price"]
item_count = item_data.groupby(["Item ID", "Item Name"]).count()["Price"].rename("Purchase Count")
?
# -------------------------------------
item_data_df = pd.DataFrame({"Total Purchase Value": total_item_purchase, "Item Price": average_item_purchase, "Purchase Count": item_count})
?
# -----------------------------------------------
item_data_count_sorted = item_data_df.sort_values("Purchase Count", ascending=False)
?
# -----------------------------------------------
item_data_count_sorted["Item Price"] = item_data_count_sorted["Item Price"].map("${:,.2f}".format)
item_data_count_sorted["Purchase Count"] = item_data_count_sorted["Purchase Count"].map("{:,}".format)
item_data_count_sorted["Total Purchase Value"] = item_data_count_sorted["Total Purchase Value"].map("${:,.2f}".format)
most_popularity = item_data_count_sorted.loc[:,["Purchase Count", "Item Price", "Total Purchase Value"]]
?
#-----------------------------------
most_popularity.head()
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
145	Fiery Glass Crusader	9	$4.58	$41.22
108	Extraction, Quickblade Of Trembling Hands	9	$3.53	$31.77
82	Nirvana	9	$4.90	$44.10
19	Pursuit, Cudgel of Necromancy	8	$1.02	$8.16
?
Most Profitable Items
Sort the above table by total purchase value in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the data frame
# Item Table (Sorted)
item_total_purchase = item_data_df.sort_values("Total Purchase Value", ascending=False)
?
# ----------------------------------------
item_total_purchase["Item Price"] = item_total_purchase["Item Price"].map("${:,.2f}".format)
item_total_purchase["Purchase Count"] = item_total_purchase["Purchase Count"].map("{:,}".format)
item_total_purchase["Total Purchase Value"] = item_total_purchase["Total Purchase Value"].map("${:,.2f}".format)
most_profitable = item_total_purchase.loc[:,["Purchase Count", "Item Price", "Total Purchase Value"]]
?
#------------------------------
most_profitable.head()
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
82	Nirvana	9	$4.90	$44.10
145	Fiery Glass Crusader	9	$4.58	$41.22
92	Final Critic	8	$4.88	$39.04
103	Singed Scalpel	8	$4.35	$34.80
?
